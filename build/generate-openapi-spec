#!/bin/bash

# Generate OpenAPI spec from the application using openapitools/openapi-generator-cli
set -e

OPEN_API_GENERATOR_CLI_IMAGE="openapitools/openapi-generator-cli:v7.12.0"
PROJECT_ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
OUTPUT_DIR="${PROJECT_ROOT}/openapi"
BPG_CONTAINER="bpg"
BPG_IMAGE="bpg:openapi-spec"
BPG_API_PORT=8080
BPG_API_BASE_URL="http://localhost:${BPG_API_PORT}/skatev2"
HEALTH_CHECK_URL="${BPG_API_BASE_URL}/healthcheck/status"
OPENAPI_URL="${BPG_API_BASE_URL}/openapi.<format>"
API_USER=user_name
API_PASSWORD=dummy_password
HOST_APP_CONFIG="${PROJECT_ROOT}/helm/batch-processing-gateway/resources/config.example.yaml"
CONTAINER_APP_CONFIG="/etc/app_config/app-config.yaml"


check_docker() {
    # Check if Docker is installed
  if ! command -v docker &> /dev/null; then
    echo "Docker is not installed. Please install Docker to use this script."
    exit 1
  fi
}

check_openapi_generator_cli() {
    # Check if the OpenAPI Generator CLI image is available locally
  if ! docker image inspect ${OPEN_API_GENERATOR_CLI_IMAGE} &> /dev/null; then
    echo "Image ${OPEN_API_GENERATOR_CLI_IMAGE} not available locally, pulling..."
    docker pull "${OPEN_API_GENERATOR_CLI_IMAGE}"
  fi
}

check_bpg_image() {
    # Check if the BPG image is available locally, if not, build it
    if docker image inspect ${BPG_IMAGE} &> /dev/null; then
        echo "Image ${BPG_IMAGE} available locally."
        return
    fi

    echo "Image ${BPG_IMAGE} not available locally, building..."

    docker buildx build \
        -t ${BPG_IMAGE} \
        --build-arg VERSION="1.0.0" \
        --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
        --build-arg GIT_COMMIT=$(git rev-parse HEAD) \
        -f "${PROJECT_ROOT}/Dockerfile" \
        "${PROJECT_ROOT}"
}

start_bpg_container() {
    # Check if the container already exists and is running
    if docker ps -q --filter "name=${BPG_CONTAINER}" | grep -q .; then
        echo "Container ${BPG_CONTAINER} is already running."
    elif docker ps -a -q --filter "name=${BPG_CONTAINER}" | grep -q .; then
        echo "Container ${BPG_CONTAINER} exists but is not running. Starting it..."
        docker start ${BPG_CONTAINER}
    else
        echo "Starting new ${BPG_CONTAINER} container..."
        docker run -d \
            --name ${BPG_CONTAINER} \
            -p ${BPG_API_PORT}:${BPG_API_PORT} \
            -v "${HOST_APP_CONFIG}:${CONTAINER_APP_CONFIG}" \
            ${BPG_IMAGE}
    fi

    # Check the API health regardless of whether we started a new container or reused an existing one
    echo "Checking API health..."
    while ! curl -u ${API_USER}:${API_PASSWORD} -s -f -H "Accept: application/json" ${HEALTH_CHECK_URL}; do
        echo "Waiting for ${BPG_CONTAINER} API to be healthy..."
        sleep 1
    done
    echo "\n${BPG_CONTAINER} API is healthy."
}


teardown_bpg_container() {
    echo "Stopping and removing BPG container..."
    docker stop ${BPG_CONTAINER}
    docker rm ${BPG_CONTAINER}
    echo "BPG container stopped and removed."
}

dump_openapi_spec() {
    # Dump the OpenAPI spec with curl
    # $1 - format: json or yaml (default: json)
    local format=${1:-"json"}
    
    # Validate format parameter
    if [ "$format" != "json" ] && [ "$format" != "yaml" ]; then
        echo "Invalid format '$format'. Supported formats are 'json' or 'yaml'."
        exit 1
    fi
    
    echo "Dumping OpenAPI spec in ${format} format..."
    mkdir -p ${OUTPUT_DIR}

    # Format the URL for request and output file
    local openapi_url=${OPENAPI_URL//<format>/$format}
    local output_file="${OUTPUT_DIR}/openapi.${format}"
    
    # Generate the spec in the requested format
    echo "Generating ${format} format..."
    curl -u ${API_USER}:${API_PASSWORD} -s -f -H "Accept: application/json" ${openapi_url} > ${output_file}
    if [ $? -ne 0 ]; then
        echo "Failed to dump OpenAPI spec in ${format} format."
        exit 1
    fi
    
    echo "OpenAPI spec dumped successfully in ${format} format."
}

main() {
  check_docker
  check_openapi_generator_cli
  check_bpg_image
  start_bpg_container
  dump_openapi_spec "json"
  dump_openapi_spec "yaml"
  teardown_bpg_container
}

main
